/* REXX */
/**********************************************************************/
/* this routine gets the address space list - version 1.0             */
/**********************************************************************/
/*------------------ initialize global variables ---------------------*/
trace 0
address tso                                    /* set mode            */
numeric digits 30                              /* set decimal size    */
sysn = mvsvar('SYSNAME')                       /* get sysname         */
red   = '01'x                                  /* set colour          */
blue  = '02'x                                  /* attributes fo the   */
green = '03'x                                  /* dynamic display     */
white = '04'x                                  /* area                */
turq  = '05'x                                  /*                     */
pink  = '06'x                                  /*                     */
yellow = '07'x                                 /*                     */
cur_line = 1                                   /* first row           */
csrpos  = 1                                    /* first character     */
poppos  = 3                                    /* start pos. for pop  */
display_again = 'Y'                            /* display once        */
scrn_wdth = 64                                 /* set screen width    */
sfld = 2                                       /* sort on first field */
sfld = 2                                       /* sort on first field */
slen = 8                                       /* length of field     */
sorder = 'A'                                   /* sort type           */
vfld = 'ALL'                                   /* view selection flag */
vdis = 'All'                                   /* view selection flag */
/*------------------ get address space list --------------------------*/
cvt = c2d(storage(10,4))                       /* point to cvt        */
ecvt = c2d(storage(d2x(cvt+140),4))            /* point to cvtecvt    */
cvtasvt = c2d(storage(d2x(cvt+556),4))         /* point to cvtasvt    */
asvtmaxu = c2d(storage(d2x(cvtasvt+516),4))    /* Â£ slots available   */

do until display_again = 'N'                  /* until PF3 is pressed */
  inc = 1                                      /* at least once       */
  acnt = 0                                     /*                     */
  bcnt = 0                                     /*                     */
  btcnt = 0                                    /* initialize          */
  icnt = 0                                     /* counters            */
  ocnt = 0                                     /* for all active      */
  scnt = 0                                     /* address spaces      */
  stcnt = 0                                    /*                     */
  sycnt = 0                                    /*                     */
  tcnt = 0                                     /*                     */
  ucnt = 0                                     /*                     */
  inc = 1                                      /* at least once       */
/*---------------- get the cpu percentage ----------------------------*/
  srmt = c2d(storage((d2x(cvt+604)),4))        /* point to smrt       */
  cct = c2d(storage((d2x(srmt+4)),4))          /* point to cvtecvt    */
  cpp = format(c2d(storage(d2x(cct+102),2)),3)||'%' /* format display */
/*---------------- loop through non-vacant asvt slots ----------------*/
  do cntr = 0 to asvtmaxu                     /* check all ASVT slots */
    offset = cntr * 4                          /* increment offset    */
    in_use_flag = storage(d2x(cvtasvt+528+offset),1)  /* get flag     */
    if bitand(in_use_flag,'80'x) = '80'x then iterate   /* in use?    */
    ascb = c2d(storage(d2x(cvtasvt+528+offset),4)) /* get ascb addr.  */
    if ascb = '0' then iterate                     /* valid address?  */
    if storage(d2x(ascb),4) <> 'ASCB' then iterate   /* eye catcher?  */
    call get_ascb
  end
  maxlines = inc - 1                           /* set maximum lines   */
  mcnt = maxlines                              /* set total ASIDs     */
  call quicksort 1,maxlines                    /* sort the displays   */
  call display_list                            /* display results     */
end

exit
/**********************************************************************/
/*-------------------- sub-routines ----------------------------------*/
/**********************************************************************/
/*------------- get address space infomation -------------------------*/
get_ascb:
asid = red||right(c2d(storage(d2x(ascb+36),2)),3)  /* get ASID        */
dpri = blue||right(c2x(storage(d2x(ascb+43),1)),3) /* dispatch prior. */
cscb = c2d(storage(d2x(ascb+56),4))            /* address of CSCB     */
ascbejst = c2d(storage(d2x(ascb+64),8))        /* job step cpu time   */
/*--------------- convert CPU time to hh:mm.ss -----------------------*/
cputime = ascbejst/4096/1000000                /* convert to minutes  */
cpuhrs = cputime%60                            /* convert to hours    */
cpuhrs = right(cpuhrs,3,' ')||':'              /* pad, add separator  */
cpumin = (cputime//60)*60%60                   /* get seconds         */
cpumin = right(cpumin,2,'0')||'.'              /* pad, add separator  */
cpusec = cputime//1                            /* get seconds         */
cpusec = substr(cpusec,3,2,'0')                /* pad                 */
cpu = white||cpuhrs||cpumin||cpusec            /* build string        */
/*--------------- get the assb info and build output line ------------*/
assb = c2d(storage(d2x(ascb+336),4))           /* address of ASSB     */
assbvsc = c2d(storage(d2x(assb+32),4))         /* VIO Aux pages used  */
vio = turq||right(assbvsc,8)                   /* vio count           */
assbnvsc = c2d(storage(d2x(assb+36),4))        /* non-VIO Aux pages   */
nonvio = blue||right(assbnvsc,8)               /* non-vio count       */
/*------------- set the job name and display colour ------------------*/
ascbjbns = c2d(storage(d2x(ascb+176),4))       /* address of jobname  */

if ascbjbns = 0 then call starting_asid        /* Starting asid       */
else
  do
    jname = storage(d2x(ascbjbns),8)           /* get jobname         */
    if cscb = 0 then call master_asid          /* Master asid?        */
    else
      do
        chtrkid = c2d(storage(d2x(cscb+28),1)) /* display identifier  */
        select
          when chtrkid = 1 then call tso_asid  /* TSO asid?           */
          when chtrkid = 2 then call stc_asid  /* STC asid?           */
          when chtrkid = 3 then call init_asid /* Initiator asid?     */
          when chtrkid = 4 then call system_asid /* System asid       */
          otherwise call unknown_asid          /* Unknown asid        */
        end
      end
  end

oucb = c2d(storage(d2x(ascb+144),4))           /* address of OUCB     */
oucbsfl = storage(d2x(oucb+17),1)              /* swapout flag        */
oucbsrc = c2d(storage(d2x(oucb+41),1))         /* get swap code       */
/*----------------- convert numeric to swap code ---------------------*/
select
  when oucbsrc = 1 then swap = blue||'TO'
  when oucbsrc = 2 then swap = green||'TI'
  when oucbsrc = 3 then swap = pink||'LW'
  when oucbsrc = 4 then swap = turq||'XS'
  when oucbsrc = 5 then swap = blue||'RS'
  when oucbsrc = 6 then swap = pink||'DW'
  when oucbsrc = 7 then swap = green||'RQ'
  when oucbsrc = 8 then swap = turq||'NQ'
  when oucbsrc = 9 then swap = blue||'EX'
  when oucbsrc = 10 then swap = pink||'US'
  when oucbsrc = 11 then swap = gteen||'TS'
  when oucbsrc = 12 then swap = turq||'IC'
  when oucbsrc = 13 then swap = blue||'IP'
  when oucbsrc = 14 then swap = pink||'MR'
  when oucbsrc = 15 then swap = green||'AW'
  when oucbsrc = 16 then swap = turq||'OI'
  when oucbsrc = 17 then swap = blue||'OO'
  otherwise if bitand(oucbsfl,'80'x) = '80'x then swap = green||'NS'
            else swap = yellow||'IN'
end

ouxb = c2d(storage(d2x(ascb+148),4))           /* address of ouxb     */
ouxbiosm = c2d(storage(d2x(ouxb+152),4))       /* exception count     */
excp = pink||right(strip(ouxbiosm),9)          /* get exception count */
rsme = c2d(storage(d2x(ascb+364),4))           /* address of rsme     */
rstor = green||format(c2d(storage(d2x(rsme+44),4)),5) /* format rstor */

if vfld = 'ALL' then call build_output
else
  if type = vfld then call build_output
  else nop

return
/*----------------------- build the output line ----------------------*/
build_output:
line.inc = jname||asid||dpri||swap||cpu||rstor||vio||nonvio||excp
inc = inc + 1                                  /* increment counter   */

return
/*----------------------- Init ASID ----------------------------------*/
init_asid:
select
  when jname = 'ASCHINT' then                  /* Initiator?          */
    do
      jname = white||jname                     /* set colour          */
      type = 'ASC'                             /* set type            */
      acnt = acnt + 1                          /* increment counter   */
    end
  when jname = 'BPXAS' then                    /* OMVS asid?          */
    do
      ascbjbni = c2d(storage(d2x(ascb+172),4)) /* iname address       */
      if ascbjbni = 0 then                     /* blank iname field   */
        do
          jname = pink||jname                  /* set colour          */
          type = 'BPX'                         /* set type            */
          bcnt = bcnt + 1                      /* increment counter   */
        end
      else
        do
          jname = pink||storage(d2x(ascbjbni),8) /* use iname         */
          type = 'OMV'                         /* set type            */
          ocnt = ocnt + 1                      /* increment counter   */
        end
    end
  when jname = 'INIT' then                     /* Initiator?          */
    do
      ascbjbni = c2d(storage(d2x(ascb+172),4)) /* iname address       */
      if ascbjbni = 0 then                     /* blank iname field   */
        do
          jname = white||jname                 /* set colour          */
          type = 'INI'                         /* set type            */
          icnt = icnt + 1                      /* increment counter   */
        end
      else
        do
          jname = yellow||storage(d2x(ascbjbni),8) /* use iname       */
          type = 'BAT'                         /* set type            */
          btcnt = btcnt + 1                    /* increment counter   */
        end
    end
  otherwise call unknown_asid                  /* what's left         */
end

return
/*----------------------- Master ASID --------------------------------*/
master_asid:
jname = white||jname                           /* set colour          */
type = 'SYS'                                   /* set type            */
sycnt = sycnt + 1                              /* increment counter   */

return
/*----------------------- Starting ASID ------------------------------*/
starting_asid:
jname = yellow||'Starting'                     /* set colour          */
type = 'UKN'                                   /* set type            */
stcnt = stcnt + 1                              /* increment counter   */

return
/*----------------------- STC ASID -----------------------------------*/
stc_asid:
jname = turq||jname                            /* set colour          */
type = 'STC'                                   /* set type            */
scnt = scnt + 1                                /* increment counter   */

return
/*----------------------- System ASID --------------------------------*/
system_asid:
jname = blue||jname                            /* set colour          */
type = 'SYS'                                   /* set type            */
sycnt = sycnt + 1                              /* increment counter   */

return
/*----------------------- TSO ASID -----------------------------------*/
tso_asid:
jname = green||jname                           /* set colour          */
type = 'TSO'                                   /* set type            */
tcnt = tcnt + 1                                /* increment counter   */

return
/*----------------------- Unknown ASID -------------------------------*/
unknown_asid:
jname = red||'Unknown '                        /* set colour          */
type = 'UKN'                                   /* set type            */
ucnt = ucnt + 1                                /* increment counter   */

return
/*----------------------- sort the output lines ----------------------*/
quicksort: procedure expose line. sorder sfld slen
arg first,last                                 /* point to cvtgda     */
ptr1 = first                                   /* point to cvtgda     */
ptr2 = last                                    /* point to cvtgda     */
mid_point = (first + last) % 2                 /* point to cvtgda     */
keep = substr(line.mid_point,sfld,slen)        /* point to cvtgda     */

do until ptr1 > ptr2                           /* point to cvtgda     */
  if sorder = 'A' then                         /* ascending sort      */
    do
      do while substr(line.ptr1,sfld,slen) << keep /* less than ?     */
        ptr1 = ptr1 + 1                        /* increment counter   */
      end
      do while substr(line.ptr2,sfld,slen) >> keep /* more than ?     */
        ptr2 = ptr2 - 1                        /* decrement counter   */
      end
    end
  else                                         /* decending sort      */
    do
      do while substr(line.ptr1,sfld,slen) >> keep /* more than ?     */
        ptr1 = ptr1 + 1                        /* increment counter   */
      end
      do while substr(line.ptr2,sfld,slen) << keep /* less than ?     */
        ptr2 = ptr2 - 1                        /* decrement counter   */
      end
    end
      if ptr1 <= ptr2 then                     /* point to cvtgda     */
        do
          temp_var = line.ptr1                 /* swap the two fields */
          line.ptr1 = line.ptr2                /* using the temporary */
          line.ptr2 = temp_var                 /* field               */
          ptr1 = ptr1 + 1                      /* increment counter   */
          ptr2 = ptr2 - 1                      /* decrement counter   */
        end
    end

if first < ptr2 then call quicksort first,ptr2 /* move down top       */
if ptr1 < last then call quicksort ptr1,last   /* move up bottom      */

return
/*--------------------- display list in pop-up window ----------------*/
display_list:
title = ' Address Space List - 'vdis' for 'sysn /* set display title  */
srchfor = ''                                   /* null string         */
dyndata = ''                                   /* initialize display  */

do inc = 1 to maxlines                         /* for each line       */
  dyndata = dyndata||line.inc                  /* build output line   */
end

dyndata = dyndata||blue||centre(white||'BOTTOM'||blue,scrn_wdth-1,'*')

address ispexec                                /* set mode            */
"vget zpf05 profile"                           /* get PF5 key         */
zpf05_old = zpf05                              /* save old key        */
zpf05 = 'AGAIN'                                /* set PF5 key         */
"vput zpf05 profile"                           /* store PF5 key       */
cursor = 'cursor()'                            /* set initial value   */
"addpop row(2) column("poppos")"               /* set window          */

do until disprc > 0
  display_again = 'N'
  dynarea = substr(dyndata,1+(cur_line-1)*scrn_wdth) /* set display   */
  "display panel(checkasl)" cursor             /* display result      */
  disprc = rc
  "vget (zverb,zscrolla,zscrolln)"             /* get ispf values     */
  select
    when zverb = 'UP' then
      do
        if zscrolla = 'MAX' then cur_line = 1  /* move to top         */
        else cur_line = max(1,cur_line-zscrolln) /* up x lines        */
      end
    when zverb = 'DOWN' then
      do
        if zscrolla = 'MAX' then cur_line = maxlines  /* move to bot. */
        else cur_line = min(maxlines,cur_line+zscrolln) /*down x lines*/
      end
    when zcmd = 'AGAIN' & srchfor <> '' then   /* PF5 pressed         */
      do
        from_here = start_pos                  /* get search string   */
        start_pos = pos(srchfor,dyndata,from_here+1) /* search again  */
        if start_pos <> 0 then call get_position /* if found, display */
        else call not_found                    /* reset cursor        */
      end
    when substr(zcmd,1,1) = 'F' then           /* find a string?      */
      do
        parse var zcmd . srchfor               /* get search string   */
        start_pos = pos(srchfor,dyndata)       /* search for string   */
        if start_pos <> 0 then call get_position /* if found, display */
        else call not_found                    /* reset cursor        */
      end
    when substr(zcmd,1,1) = 'L' & sort = 'Y' then
      do
        "addpop row(2) column(18)"             /* start window        */
        "display panel(checkact)"              /* display results     */
        "rempop"                               /* stop window         */
      end
    when substr(zcmd,1,1) = 'S' then
      do
        "addpop column(10)"                    /* Set up sort window  */
        "display panel(checksrt)"              /* Display window      */
        "rempop"                               /* remove window       */
        display_again = 'Y'                    /* Display again       */
        cur_line = 1                           /* set to top          */
        leave                                  /* exit loop           */
      end
    when substr(zcmd,1,1) = 'V' then
      do
        "addpop column(10)"                    /* Set up sort window  */
        "display panel(checkvie)"              /* Display window      */
        "rempop"                               /* remove window       */
        display_again = 'Y'                    /* display again       */
        cur_line = 1                           /* set to top          */
        leave                                  /* exit loop           */
      end
    when disprc = 0 then                       /* enter pressed       */
      do
        display_again = 'Y'                    /* display again       */
        leave                                  /* exit loop           */
      end
    otherwise
  end
end

"rempop"                                       /* close window        */
zpf05 = zpf05_old                              /* reset pf key        */
"vput zpf05 profile"                           /* store PF5 key       */
address tso                                    /* set mode            */

return
/*------------------ calculate line position in dynamic area ---------*/
get_position:
cur_line = start_pos%scrn_wdth+1               /* get row position    */
csrpos = start_pos//scrn_wdth                  /* get column position */
cursor = 'cursor(dynarea)'                     /* set cursor field    */

return
/*------------------ calculate line position in dynamic area ---------*/
not_found:
cur_line = 1                                   /* set row position    */
csrpos  = 1                                    /* set column position */
cursor = 'cursor()'                            /* set cursor field    */

return
