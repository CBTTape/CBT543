/* REXX */
/**********************************************************************/
/* this routine gets the APF list - version 1.0                       */
/**********************************************************************/
/*------------------ initialize global variables ---------------------*/
trace 0
address tso                                    /* set mode            */
numeric digits 30                              /* set decimal size    */
sysn = mvsvar('SYSNAME')                       /* get sysname         */
red   = '01'x                                  /* set colour          */
blue  = '02'x                                  /* attributes fo the   */
green = '03'x                                  /* dynamic display     */
white = '04'x                                  /* area                */
turq  = '05'x                                  /*                     */
pink  = '06'x                                  /*                     */
yellow = '07'x                                 /*                     */
cur_line = 1                                   /* first row           */
csrpos  = 1                                    /* first character     */
poppos  = 8                                    /* start pos. for pop  */
scrn_wdth = 53                                 /* set screen width    */
/*------------------ get linklist data -------------------------------*/
cvt = c2d(storage(10,4))                       /* point to cvt        */
ecvt = c2d(storage(d2x(cvt+140),4))            /* point to cvtecvt    */
cvtauthl = c2d(storage(d2x(cvt+484),4))        /* point to cvtauthl   */

if cvtauthl <> c2d('7ffff001'x) then           /* dynamic list ?      */
  do
    maxlines = c2d(storage(d2x(cvtauthl),2))   /* £ apf in table      */
    apfoff   = 2                               /* first in apf tbl    */
    do inc = 1 to maxlines
       len = c2d(storage(d2x(cvtauthl+apfoff),1))  /* length of entry */
       apfvol = storage(d2x(cvtauthl+apfoff+1),6)  /* apf volser      */
       apfdsn = storage(d2x(cvtauthl+apfoff+1+6),len-6) /* apf dsn    */
       apfoff = apfoff+len+1                   /* set apf offset      */
       line.inc = green||left(apfdsn,45)||blue||apfvol
    end
  end
else
  do
    ecvtcsvt = c2d(storage(d2x(ecvt+228),4))   /* point to ecvtcsvt   */
    apfa = c2d(storage(d2x(ecvtcsvt+12),4))    /* addr start of list  */
    apht = c2d(storage(d2x(apfa+8),4))         /* addr 1st entry      */
    last = c2d(storage(d2x(apfa+12),4))        /* addr last entry     */
    apf. = ''
    inc = 0
    do forever
      apfdsn = storage(d2x(apht+24),44)        /* apf dataset name    */
      if substr(apfdsn,1,1) ¬= '00'x then      /* 00 = deleted        */
        do
          apfesms = storage(d2x(apht+4),1)     /* sms flag            */
          if  bitand(apfesms,'80'x)  = '80'x then apfvol = '*SMS* '
          else apfvol = storage(d2x(apht+68),6)   /* apf volser       */
          line.inc =green||left(apfdsn,45)||blue||apfvol
          inc = inc + 1
        end
      if apht = last then leave
      else apht = c2d(storage(d2x(apht+8),4))  /* addr next entry     */
    end
    maxlines = inc - 1
  end                                          /* set maximum lines   */

/*--------------------- display list in pop-up window ----------------*/
title = maxlines' APF Datasets for 'sysn       /* set display title   */
srchfor = ''                                   /* null string         */
dyndata = ''                                   /* initialize display  */

do inc = 1 to maxlines                         /* for each line       */
  dyndata = dyndata||line.inc                  /* build output line   */
end

dyndata = dyndata||blue||centre(white||'BOTTOM'||blue,scrn_wdth-1,'*')

address ispexec                                /* set mode            */
"vget zpf05 profile"                           /* get PF5 key         */
zpf05_old = zpf05                              /* save old key        */
zpf05 = 'AGAIN'                                /* set PF5 key         */
"vput zpf05 profile"                           /* store PF5 key       */
cursor = 'cursor()'                            /* set initial value   */
"addpop row(2) column("poppos")"               /* set window          */

do until disprc > 0
  dynarea = substr(dyndata,1+(cur_line-1)*scrn_wdth) /* set display   */
  "display panel(checkapf)" cursor             /* display result      */
  disprc = rc
  "vget (zverb,zscrolla,zscrolln)"             /* get ispf values     */
  select
    when zverb = 'UP' then
      do
        if zscrolla = 'MAX' then cur_line = 1  /* move to top         */
        else cur_line = max(1,cur_line-zscrolln) /* up x lines        */
      end
    when zverb = 'DOWN' then
      do
        if zscrolla = 'MAX' then cur_line = maxlines  /* move to bot. */
        else cur_line = min(maxlines,cur_line+zscrolln) /*down x lines*/
      end
    when zcmd = 'AGAIN' & srchfor <> '' then   /* PF5 pressed         */
      do
        from_here = start_pos                  /* get search string   */
        start_pos = pos(srchfor,dyndata,from_here+1) /* search again  */
        if start_pos <> 0 then call get_position /* if found, display */
        else call not_found                    /* reset cursor        */
      end
    when substr(zcmd,1,1) = 'F' then           /* find a string?      */
      do
        parse var zcmd . srchfor               /* get search string   */
        start_pos = pos(srchfor,dyndata)       /* search for string   */
        if start_pos <> 0 then call get_position /* if found, display */
        else call not_found                    /* reset cursor        */
      end
    otherwise
  end
end

"rempop"                                       /* close window        */
zpf05 = zpf05_old                              /* reset pf key        */
"vput zpf05 profile"                           /* store PF5 key       */
address tso                                    /* set mode            */

exit
/*------------------ calculate line position in dynamic area ---------*/
get_position:
cur_line = start_pos%scrn_wdth+1               /* get row position    */
csrpos = start_pos//scrn_wdth                  /* get column position */
cursor = 'cursor(dynarea)'                     /* set cursor field    */

return
/*------------------ calculate line position in dynamic area ---------*/
not_found:
cur_line = 1                                   /* set row position    */
csrpos  = 1                                    /* set column position */
cursor = 'cursor()'                            /* set cursor field    */

return
